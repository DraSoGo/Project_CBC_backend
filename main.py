from fastapi import FastAPI, File, UploadFile
import torch
import io
import cv2
import numpy as np
from PIL import Image
from fastapi.responses import Response
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import os

app = FastAPI()

# ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ Frontend (Next.js) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô ["http://localhost:3000"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üìå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ torch.hub)
MODEL_PATH = "./models/CBC.pt"

if not os.path.exists(MODEL_PATH):
    raise RuntimeError(f"Model file not found: {MODEL_PATH}")

model = torch.load(MODEL_PATH, map_location=torch.device("cpu"))  # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
model.eval()  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•

@app.get("/")
def root():
    return {"message": "YOLOv5 API is running!"}

@app.post("/predict/")
async def predict(file: UploadFile = File(...)):
    try:
        contents = await file.read()
        image = Image.open(io.BytesIO(contents)).convert("RGB")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô numpy array
        img_array = np.array(image)
        results = model(img_array)

        # Render ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å YOLOv5
        results.render()

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JPEG
        for img in results.ims:  
            img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
            _, img_encoded = cv2.imencode('.jpg', img_bgr)
            return Response(content=img_encoded.tobytes(), media_type="image/jpeg")

    except Exception as e:
        return {"error": str(e)}

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Local
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
